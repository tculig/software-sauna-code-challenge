import { transformMap } from './';

describe('Transform Map', () => {
    it('test 1', () => {
        const mazeData = `
        @---A---+
                |
        x-B-+   C
            |   |
            +---+`;
        const result = transformMap(mazeData);
        expect(result).toEqual([
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', '-', '-', '-', 'A', '-', '-', '-', '+'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', '-', 'B', '-', '+', ' ', ' ', ' ', 'C'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', '|'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '-', '-', '-', '+'],
        ]);
    });

    it('test 1', () => {
        const mazeData = `
@
| +-C--+
A |    |
+---B--+
  |      x
  |      |
  +---D--+`;
        const result = transformMap(mazeData);
        expect(result).toEqual([
            ['@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            ['|', ' ', '+', '-', 'C', '-', '-', '+', ' ', ' '],
            ['A', ' ', '|', ' ', ' ', ' ', ' ', '|', ' ', ' '],
            ['+', '-', '-', '-', 'B', '-', '-', '+', ' ', ' '],
            [' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', 'x'],
            [' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', '|'],
            [' ', ' ', '+', '-', '-', '-', 'D', '-', '-', '+'],
        ]);
    });
});
